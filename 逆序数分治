#include <algorithm>
#include <stdio.h>
#include <string.h>
using namespace std;
long long ans = 0;
int A[100010], B[100010];
void _sort(int *a, int l, int mid, int r, int *b)
{
    int p1 = l, p2 = mid + 1, cut = 0;
    while (p1 <= mid && p2 <= r)
    {
        if (a[p1] <= a[p2]) //这里不能是++
            b[cut++] = a[p1++];
        else
        {
            b[cut++] = a[p2++];    //将左右归并一个有序数组
            ans += (mid - p1 + 1); //如果P1大于右区域，左区P1右边的都大于，p1及其右每个都能于右区数构成逆序+1为p1
        }
    }
    while (p1 <= mid) //因为上面是自增，p1变了，只会省一边没到界，将其全放入后面
        b[cut++] = a[p1++];
    while (p2 <= r)
        b[cut++] = a[p2++];
    for (int i = 0; i < cut; i++)
    {
        a[i + l] = b[i];
    }
}
void er_sort(int *a, int l, int r, int *b) //二分
{
    int mid;
    if (l < r)
    {
        mid = (l + r) >> 1; //=/2
        er_sort(a, l, mid, b);
        er_sort(a, mid + 1, r, b);
        _sort(a, l, mid, r, b);
    }
}
int main()
{
    int n;
    scanf("%d", &n);
    for (int i = 1; i <= n; i++) //这里他是用起始1，如果用0，n取不到，传参应是n-1，计算mid是应是能取得的两边界
        scanf("%d", &A[i]);
    er_sort(A, 1, n, B);
    printf("%lld\n", ans);
}
